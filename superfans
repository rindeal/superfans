#!/usr/bin/env python3
#
# superfans
# https://github.com/putnam/superfans
#
import os, sys, click, subprocess, time, shutil

FAN_PRESET_STANDARD=0
FAN_PRESET_FULL=1
FAN_PRESET_OPTIMAL=2
FAN_PRESET_HEAVYIO=4
FAN_PRESETS=[FAN_PRESET_STANDARD, FAN_PRESET_FULL, FAN_PRESET_OPTIMAL, FAN_PRESET_HEAVYIO]
FAN_PRESETS_STR={\
  'standard' : FAN_PRESET_STANDARD,\
  'full' : FAN_PRESET_FULL,\
  'optimal' : FAN_PRESET_OPTIMAL,\
  'heavyio' : FAN_PRESET_HEAVYIO\
}
FAN_PRESETS_DESC={ \
  FAN_PRESET_STANDARD : "Standard (Temp controlled, target 50%)", \
  FAN_PRESET_FULL : "Full (All fans at 100%)", \
  FAN_PRESET_OPTIMAL : "Optimal (Temp controlled, target 30%)", \
  FAN_PRESET_HEAVYIO : "Heavy IO (Temp controlled, CPU target 50%; Peripherals target 75%" \
}


@click.group()
@click.option('--hostname', '-h', default='localhost', help='Remote hostname (default: localhost)')
@click.option('--username', '-u', default=None, help='Remote IPMI username')
@click.option('--password', '-p', default=None, help='Remote IPMI password')
@click.option('--env-password', '-e', is_flag=True, default=False, help='Use IPMI_PASSWORD environment variable for password')
@click.pass_context
def cli(ctx, hostname, username, password, env_password):
  """
  Tools for managing fans on a Supermicro chassis.

  Fan presets can be adjusted, or fans manually updated to a certain speed.

  If a hostname is specified, superfans will use the specified username and password to connect. If a hostname is not specified, ipmitool will talk to the local machine using the IPMI kernel module (you must be root).

  When setting fan speed manually, the fan preset must be set to Full, or else the hardware fan controller will automatically adjust the speed again after some time has passed.

  For a list of presets, use `superfans preset --help`.

  If needed, the hostname, username, and password options should precede commands. A hostname of "localhost" (the default) will skip IPMI over lanplus and use the kernel module instead.

  \b
  EXAMPLE
  ./superfans -h bigbertha -u monkey -p secrets preset full

  NOTES

  * Some fancy PWM fans are capable at running at very low RPMs. The Supermicro BIOS considers a tachometer reading of 400-600RPM to  be "too low" and considers it a fault, resulting in the fan being adjusted automatically to 100%. If you experience this behavior you can either stick to a duty cycle above 30-40%, or adjust your sensor thresholds using ipmitool. For more info see: https://blog.pcfe.net/hugo/posts/2018-08-14-epyc-ipmi-fans/

  * Once a fan is plugged in (either at boot or hotplugged), if that same fan is unplugged the system will automatically ramp all fans up to 100% until the missing fan is replaced or the BMC is reset. Commands you send during this time will be honored only briefly and immediately overridden.

  """
  ctx.obj = {'hostname' : hostname, 'username' : username, 'password' : password, 'env_password' : env_password}



@cli.command()
@click.argument('speed', required=True, type=click.IntRange(0, 100))
@click.option('--zone', '-z', default='all', help='Fan zone to target. Fans ending with a number are in the CPU zone; fans ending with a letter are in the peripheral zone. Default: all.', type=click.Choice(['cpu', 'periph', 'all']))
@click.pass_context
def set(ctx, speed, zone):
  """
  Set fan speed to a fixed %.

  Some chassis implement separate fan "zones" named CPU and Peripheral. To target specific zones, use the --zone option.
  """

  # Make sure fans are on Full setting, or else this won't stick for long
  s = get_fan_status(ctx.obj)
  if s is False:
    click.echo("Unable to get current fan status; exiting")
    return False

  if s != FAN_PRESET_FULL:
    click.echo("The fan controller is currently not set to Full mode (required for manual fan settings, which will otherwise be adjusted by the BMC within minutes); setting it now.")
    ctx.invoke(preset, preset='full')
    click.echo("Waiting 5 seconds to let fans spin up...")
    time.sleep(5)

  ok = True
  if zone == 'all' or zone == 'cpu':
    ok = ipmi_raw_cmd(ctx.obj, [0x30, 0x70, 0x66, 0x01, 0x00, speed])
  if ok and (zone == 'all' or zone == 'periph'):
    ok = ipmi_raw_cmd(ctx.obj, [0x30, 0x70, 0x66, 0x01, 0x01, speed])

  if ok:
    click.echo("Set %s fans on %s to %d%%." % (zone, ctx.obj['hostname'], speed))
    return True
  else:
    click.echo("Unable to update fans.")
    return False

@cli.command()
@click.pass_context
def status(ctx):
  """
  Retrieves fan controller preset & fan speed.
  """
  status = get_fan_status(ctx.obj)
  if status is False:
    return False
  if status in FAN_PRESETS:
    s = FAN_PRESETS_DESC[status]
  else:
    s = "Unknown status code %d" % status
  # manual fan ctl     get(0)/set(1)  cpu(0)/periph(1)   duty(0-0x64)
  # 0x30 0x70 0x66     0x00           0x00               0x64
  fan_speed = ipmi_raw_cmd(ctx.obj, [0x30, 0x70, 0x66, 0x0, 0x0])
  if fan_speed is False:
    return False
  fan_speed2 = ipmi_raw_cmd(ctx.obj, [0x30, 0x70, 0x66, 0x0, 0x1])
  if fan_speed2 is False:
    return False

  click.echo("Preset: %s" % s)
  click.echo("Current fan speed (CPU Zone): %d%%" % int(fan_speed, 16))
  click.echo("Current fan speed (Peripheral zone): %d%%" % int(fan_speed2, 16))
  return True


PRESET_HELP = """
Applies a factory preset to fan controller.

\b
Known presets:
"""
for ps in FAN_PRESETS_STR.keys():
  PRESET_HELP += "  %s: %s\n" % (ps, FAN_PRESETS_DESC[FAN_PRESETS_STR[ps]])

@cli.command(help=PRESET_HELP)
@click.argument('preset', type=click.Choice(FAN_PRESETS_STR.keys()), required=True)
@click.pass_context
def preset(ctx, preset):
  if preset not in FAN_PRESETS_STR:
    return False
  preset = FAN_PRESETS_STR[preset]

  if ipmi_raw_cmd(ctx.obj, [0x30, 0x45, 0x1, preset]):
    click.echo("Updated preset on %s." % ctx.obj['hostname'])
    return True

  return False

def ipmi_raw_cmd(config, raw_cmd, username=None, password=None):
  hostname, username, password, use_env = (config['hostname'], config['username'], config['password'], config['env_password'])
  cmd = ["ipmitool"]

  if hostname == 'localhost':
    if os.geteuid() != 0:
      click.echo("In order to communicate with the kernel's IPMI module, you must be root.")
      sys.exit(1)
  else:
    if use_env:
      cmd_pass = ["-E"]
    else:
      cmd_pass = ["-P", password]
    cmd += ["-I", "lanplus", "-U", username, *cmd_pass, "-H", host]
  cmd += ["raw", *(hex(x) for x in raw_cmd)]

  s = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
  if s.returncode != 0:
    click.echo("Error: Problem running ipmitool")
    click.echo("Command: %s" % cmd)
    click.echo("Return code: %d" % s.returncode)
    click.echo("Output: %s" % s.stdout.decode('utf-8').strip())
    return False

  out = s.stdout.strip()
  if out:
    return out
  else:
    return True

def get_fan_status(config):
  try:
    s = ipmi_raw_cmd(config, [0x30, 0x45, 0x00])
    if s is False:
      return False
    return int(s)
  except:
    return False

if __name__ == '__main__':
  if not shutil.which('ipmitool'):
    print("Error: superfans requires ipmitool to be installed and in your PATH.")
    sys.exit(1)
  cli()
